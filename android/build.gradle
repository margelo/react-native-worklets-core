import java.nio.file.Paths

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Worklets_" + name]
}

def getExtOrIntegerDefault(name) {
  return getExtOrDefault(name).toInteger()
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("react-native-worklets-core: Failed to find node_modules/ path!")
}

def JS_RUNTIME = {
  // Override JS runtime with environment variable
  if (System.getenv("JS_RUNTIME")) {
    return System.getenv("JS_RUNTIME")
  }

  // Check if Hermes is enabled in app setup
  def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }
  if (appProject?.hermesEnabled?.toBoolean()) {
    return "hermes"
  }

  // Use JavaScriptCore (JSC) by default
  return "jsc"
}.call()

def nodeModules = findNodeModules(projectDir)

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply plugin: "com.android.library"

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

task prepareHeaders(type: Copy) {
  from fileTree('../cpp').filter { it.isFile() }
  into "${project.buildDir}/headers/rnworklets/react-native-worklets-core/"
  includeEmptyDirs = false
}

task deleteCmakeCache() {
  doFirst {
    delete "${projectDir}/.cxx"
  }
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    externalNativeBuild {
      cmake {
        arguments "-DANDROID_STL=c++_shared",
                "-DANDROID_TOOLCHAIN=clang",
                "-DREACT_NATIVE_DIR=${nodeModules}/react-native",
                "-DJS_RUNTIME=${JS_RUNTIME}",
                "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
        abiFilters (*reactNativeArchitectures())
      }
    }
  }

  buildFeatures {
    prefab true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildTypes {
    debug {
      externalNativeBuild {
        cmake {
          if (JS_RUNTIME == "hermes") {
            arguments "-DHERMES_ENABLE_DEBUGGER=1"
          } else {
            arguments "-DHERMES_ENABLE_DEBUGGER=0"
          }
        }
      }
    }
    release {
      externalNativeBuild {
        cmake {
          arguments "-DHERMES_ENABLE_DEBUGGER=0"
        }
      }
    }
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += ["src/newarch"]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }

  packagingOptions {
    excludes = [
      "META-INF",
      "META-INF/**",
      "**/libc++_shared.so",
      "**/libfbjni.so",
      "**/libjsi.so",
      "**/libfolly_json.so",
      "**/libfolly_runtime.so",
      "**/libglog.so",
      "**/libhermes.so",
      "**/libhermes-executor-debug.so",
      "**/libhermes_executor.so",
      "**/libreactnative.so",
      "**/libreactnativejni.so",
      "**/libturbomodulejsijni.so",
      "**/libreact_nativemodule_core.so",
      "**/libjscexecutor.so",
    ]
  }

  buildFeatures {
    prefabPublishing true
  }

  prefab {
    rnworklets {
      headers "${project.buildDir}/headers/rnworklets/"
    }
  }
}

dependencies {
  implementation "com.facebook.react:react-android"
  if (JS_RUNTIME == "hermes") {
    implementation "com.facebook.react:hermes-android"
  }
}

preBuild.dependsOn(prepareHeaders)

tasks.configureEach { task ->
  // C++ clean
  if (task.name.contains("clean")) {
    task.dependsOn(deleteCmakeCache)
  }
}
